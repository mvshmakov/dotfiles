# Upgrades all brew packages and checks for issues
function brew-upgrade() {
	# Updates brew itself
	brew update
	# Upgrades packages including non-necessary (e.g., transitive)
	brew upgrade --greedy
	brew cleanup
	brew autoremove
	# Here we filter out some spammy checks of brew doctor
	brew doctor $(brew doctor --list-checks | grep -vE 'check_for_stray_(dylibs|static_libs|headers)|check_for_config_scripts|check_for_non_prefixed_coreutils')
}

# Create a directory and enter in it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar"
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

	size=$(
		stat -f"%z" "${tmpFile}" 2>/dev/null # macOS `stat`
		stat -c"%s" "${tmpFile}" 2>/dev/null # GNU `stat`
	)

	local cmd=""
	if ((size < 52428800)) && hash zopfli 2>/dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli"
	else
		if hash pigz 2>/dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`â€¦"
	"${cmd}" -v "${tmpFile}" || return 1
	[ -f "${tmpFile}" ] && rm "${tmpFile}"

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2>/dev/null # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2>/dev/null # GNU `stat`
	)

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully."
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null >/dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* ./*
	fi
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

function speedup_spotlight() {
	find . -type d -path './.*' \
		-prune -o -path './Pictures*' \
		-prune -o -path './Library*' \
		-prune -o -path '*node_modules/*' \
		-prune -o -type d -name 'node_modules' -exec touch '{}/.metadata_never_index' \; \
		-print
}

# Hides and restores all the files
# on the desktop (the `presentation mode`)
function hide_desktop() {
	defaults write com.apple.finder CreateDesktop false
	killall Finder
}

function show_desktop() {
	defaults write com.apple.finder CreateDesktop true
	killall Finder
}
