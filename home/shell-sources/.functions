#!/usr/bin/env bash

# () function body create a subshell to have `set -x` only in the subshell
# https://stackoverflow.com/a/74525211
function update-all() (
	set -x

	brew update
	brew upgrade

	asdf plugin update --all
	gh extension upgrade --all
	# As zimfw uses the shell script under the hood, `-x` option will print all
	# lines and pollute the output. So, using the `+x` and updating in the subshell
	(set +x && zimfw update && zimfw upgrade)

	"$XDG_CONFIG_HOME"/tmux/plugins/tpm/bin/update_plugins all

	# Update Lazy packages and exit on LazySync event
	nvim --headless -c 'autocmd User LazySync quitall' -c 'Lazy sync'
	# Update Mason packages and quit
	nvim --headless -c 'autocmd User MasonUpdateAllComplete quitall' -c 'MasonUpdate' -c 'MasonUpdateAll'
	# Updates TS parsers as well
	nvim --headless -c 'TSUpdateSync' -c q
)

# TODO: add the nvim :checkhealth support
function diagnose-all() (
	set -x

	brew doctor
)

function clean-all() (
	set -x

	brew cleanup
	brew autoremove
)

# Create a directory and enter in it
function mkd() {
	mkdir -p "$@" && cd "$@" || exit
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar"
	tar -cvf "$tmpFile" --exclude=".DS_Store" "${@}" || return 1

	size=$(
		stat -f"%z" "$tmpFile" 2>/dev/null # macOS `stat`
		stat -c"%s" "$tmpFile" 2>/dev/null # GNU `stat`
	)

	local cmd=""
	if ((size < 52428800)) && hash zopfli 2>/dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli"
	else
		if hash pigz 2>/dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`â€¦"
	"$cmd" -v "$tmpFile" || return 1
	[ -f "$tmpFile" ] && rm "$tmpFile"

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2>/dev/null # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2>/dev/null # GNU `stat`
	)

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully."
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null >/dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi

	if [[ -n "$@" ]]; then
		du "$arg" -- "$@"
	else
		du "$arg" .[^.]* ./*
	fi
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}
