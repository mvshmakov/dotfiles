#!/usr/bin/env bash
#
# Array operations in POSIX shell in combination with shfmt are very inconvenient to write
# due to shfmt insisting on parameter expansion (e.g., ARR[@] instead of IFS= ARR). As this script
# is only relevant to MacOS, we assume bash exists.
#
# This script opts out Spotlight from indexing node_modules in process.env.ROOT_DIR.
# Initially retrieved from the https://github.com/Strajk/setup/blob/master/programs/prevent-spotlight-from-indexing-node-modules.js
# Inspired by https://mattprice.me/2020/programmatically-modify-spotlight-ignore/

set -euo pipefail
IFS=$'\n\t'

usage() {
  printf "Help"
}

# TODO: add a homebrew formulae, install it on my laptop, add it to the brewfile and share in the GitHub issue
# TODO: add --dir option (+ default on $PWD) + help menu + --force flag?
# TODO: change the name of the script spotlighter and add two subcommands (search and default)
# TODO: add --include option which will just add the path to spotlight
# TODO: add .direnv, venv and custom patterns support, /Users/$USER/Library/
# TODO: add -q | --versbose options
# TODO: add a way to build help manual based on the comments to functions inside this file

# spotlighter add PATH(s)                                                               # Adds path(s) to Exceptions
# spotlighter remove {PATH(s) | --all}                                                  # Clears all Spotlight Exceptions
# spotlighter show                                                                      # Display all of Exceptions
# spotlighter find --root=/Users/mvshmakov/projects {all|python|direnv|js}              # Find all candidates to add to Exceptions
# spotlighter find all | xargs spotlighter add                                          # Find all candidates and add to Exceptions (must make this a command) (TODO: should be a separate command?)

DIR=${PWD:-/Users/$USER/projects}
PLIST="/System/Volumes/Data/.Spotlight-V100/VolumeConfiguration.plist"
PLIST_BUDDY_BIN="/usr/libexec/PlistBuddy"

VERBOSE=false

get_exclusions() {
  sudo "$PLIST_BUDDY_BIN" -c "Print :Exclusions" "$PLIST" | sed -e 1d -e '$d' -e 's/^[ \t]*//'
}

# TODO: inline this in arguments parsing, so we'll only have get_exclusions
show_exclusions() {
  if "$VERBOSE"; then
    printf "Current contents of Exclusions:\n"
  fi
  get_exclusions
}

find_candidates() {
  FIND_ARGS=""

  while [[ $# -gt 0 ]]; do
    case "$1" in
    --type)
      if [[ "$2" =~ ^(js|python|direnv|all)$ ]]; then
        FIND_ARGS="$2"
        shift
        shift
      else
        echo "Invalid value for --type: $2"
        exit 1
      fi
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
    esac
  done

  # TODO:shift program arguments here and try to construct the correct find command options to call it just once
  find "$DIR" -type d -name 'node_modules' -prune
}

CANDIDATES=$(find_candidates | sort)
EXISTING=$(get_exclusions | sort)

# Find out which candidates are not yet in the plist
TO_ADD=$(comm -23 <(echo "$CANDIDATES") <(echo "$EXISTING"))

# Parse the command line arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
  -v | --verbose)
    VERBOSE=true
    shift
    ;;
  # -p | --port)
  #   port="$2"
  #   shift
  #   shift
  #   ;;
  show)
    show_exclusions
    exit 0
    ;;
  find)
    find_candidates "$@"
    exit 0
    ;;
  *)
    echo "Unknown command: $1"
    usage
    exit 1
    ;;
  esac
done

# Add candidates which are not yet present in the exclusions
# echo "$TO_ADD" | while read -r ITEM; do
#   sudo "$PLIST_BUDDY_BIN" -c "Add :Exclusions: string $ITEM" "$PLIST"
# done
#
# sudo launchctl stop com.apple.metadata.mds && sudo launchctl start com.apple.metadata.mds
#
# show_exclusions
#
# printf "Check and verify at System Settings > Siri & Spotlight > Spotlight Privacy"

exit 0

# No subcommand was specified
usage
exit 1
