# General usage tips:
# 1) To generate a log for some release, run:
# ```sh
# git shortlog commit_id...HEAD -n
# ```
# 2) While you can call these remotes anything you want, a common convention
# is to use origin as the remote for your forked repository (this will be
# created automatically when you run git clone) and upstream for the official repository.
# Source: https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow

[user]
    signingkey = 88C371E66837B278
    useConfigOnly = true
[includeIf "gitdir:~/projects/"]
    path = config-personal
[includeIf "gitdir:~/projects/work/iterative/"]
    path = config-iterative
[gpg]
    program = /opt/homebrew/bin/gpg
[github]
    user = mvshmakov
[sendemail]
    smtpEncryption = tls
    smtpServer = smtp.mail.ru
    smtpUser = mvshmakov@mail.ru
    smtpServerPort = 465
[credential]
    helper = osxkeychain
    # Prompt credentials if required
    interactive = always
[core]
    # lazygit wants this to be present besides $EDITOR
    editor = nvim
    pager = delta
    # Useful when sharing a repository between Mac OS and Linux or Windows (only for MacOS)
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-coreprecomposeUnicode
    precomposeUnicode = true
    # To display non-english characters in a readable way
    quotePath = false
    # This setup should leave you with CRLF endings in Windows checkouts,
    # but LF endings on macOS and Linux systems and in the repository.
    autocrlf = input
    # Detect whitespace errors https://stackoverflow.com/a/592014/12349023
    whitespace = tab-in-indent,trailing-space,cr-at-eol
[alias]
    grep = grep -Ii

    gml = !git_grep_modified_lines
    gmf = !git_grep_modified_files
    todo = gml "TODO|FIXME"
    todo-files = gmf "TODO|FIXME"
    todo-all = grep -sniE "TODO" $(git ls-files -com --exclude-standard)

    last = log -1 HEAD --stat
    log-oneline = log --oneline --decorate
    # Put only staged files in the stash
    stash-staged = !git_stash_staged
    # Will present the list of most recent commits to select and call git commit --fixup on it
    # https://jordanelver.co.uk/blog/2020/06/04/fixing-commits-with-git-commit-fixup-and-git-rebase-autosquash/#automating-further
    fixup = "!git log -n 50 --pretty=format:'%h %s' --no-show-signature --no-merges | fzf | cut -c -7 | xargs -o git commit --fixup"
[commit]
    verbose = true
    gpgSign = true
    template = ~/.config/git/gitmessage
[tag]
    gpgSign = true
    sort = -version:refname
[init]
    # Init new repo with the main branch as default
    defaultBranch = main
[apply]
    # Strip whitespaces when applying patches based on core.whitespace
    # https://stackoverflow.com/a/592014/12349023
    whitespace = fix
[fetch]
    # Remove all local references to remote that are no longer available
    prune = true
    pruneTags = true
[branch]
    # Auto track the origin on checkout
    # and auto rebase stuff on pull
    # https://stackoverflow.com/a/22147540
    autoSetupMerge = always
    autoSetupRebase = always
    sort = -committerdate
[checkout]
    defaultRemote = origin
[diff]
    # Detect moved blocks of code and style them
    # differently from the usual removed/added lines
    colorMoved = default
[log]
    showSignature = true
[merge]
    log = true
    tool = nvimdiff3
	# https://psung.blogspot.com/2011/02/reducing-merge-headaches-git-meets.html 
    conflictStyle = diff3
[push]
    # Not all git servers support this
    # https://people.kernel.org/monsieuricon/signed-git-pushes
    gpgSign = if-asked
    # This option is only about what to do if there is no refspec provided to git push
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-pushdefault
    # simple is the default one and as autoSetupRemote is set up, it is enough for 
    # convenient centralized workflow
    default = simple
    # Assume --set-upstream on default push when no upstream tracking exists for the current branch
    autoSetupRemote = true
[pull]
    rebase = true
    default = current
[rebase]
    # During the interactive rebase, auto-squashes !fixup commits
    # https://thoughtbot.com/blog/autosquashing-git-commits
    # https://jordanelver.co.uk/blog/2020/06/04/fixing-commits-with-git-commit-fixup-and-git-rebase-autosquash/#autosquash
    autoSquash = true
    # Allow to rebase even on a dirty worktree
    # e.g., allow pull --rebase with local changes
    autoStash = true
[help]
    # Ask to autocorrect misspelled command
    autoCorrect = prompt
[interactive]
    # Git-delta related setup
    # https://github.com/dandavison/delta
    diffFilter = delta --color-only
[delta]
    navigate = true
    side-by-side = true
    line-numbers = true
[color]
    # Colorize git output https://stackoverflow.com/a/13075208/12349023
    ui = auto
# Auto-generated by `git lfs install`
[filter "lfs"]
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
# Settings are auto-generated by Tcl/Tk git-gui
[gui]
	fontui = -family \"FiraCode Nerd Font Mono\" -size 13 -weight normal -slant roman -underline 0 -overstrike 0
	fontdiff = -family \"FiraCode Nerd Font Mono\" -size 11 -weight normal -slant roman -underline 0 -overstrike 0
